server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 5s
  shutdown: graceful
spring:
  application:
    name: catalog-gateway
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid
        provider:
          keycloak:
            issuer-uri: http://localhost:8091/realms/PolarBookshop

  session:
    store-type: redis
    timeout: 5m
    redis:
      namespace: catalog:edge
  redis:
    host: localhost
    port: 6379
    timeout: 1s
  cloud:
    gateway:
      default-filters:
        - SaveSession
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false

      httpclient:
        connect-timeout: 1000
        response-timeout: 1s
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:8080}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: purchase-route
          uri: ${PURCHASE_SERVICE_URL:http://localhost:8183}/purchase
          predicates:
            - Path=/purchase/**

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      defaults:
        timeoutDuration: 5s
